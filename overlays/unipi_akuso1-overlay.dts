/dts-v1/;
/plugin/;

/{
	compatible = "brcm,bcm2711";

	fragment@0 {
		target = <&uart3>;
		__overlay__ {
			pinctrl-names = "default";
			pinctrl-0 = <&uart3_pins>;
			status = "okay";
			linux,rs485-enabled-at-boot-time;
			uart-has-rtscts;
		};
	};

	fragment@1 {
		target = <&uart3_pins>;
		__overlay__ {
			brcm,pins = <4 5 7>;
			brcm,pull = <0 2 0>;
		};
	};

	fragment@2 {
		target = <&uart0>;
		__overlay__ {
			pinctrl-names = "default";
			pinctrl-0 = <&uart0_pins>, <&uart0_rts_pins>;
			status = "okay";
			linux,rs485-enabled-at-boot-time;
			uart-has-rtscts;
		};
	};

	fragment@3 {
		target = <&gpio>;
		__overlay__ {
			uart0_pins: uart0_ovl_pins {
				brcm,pins = <14 15>;
				brcm,function = <4>; /* alt0 */
				brcm,pull = <0 2>;
			};
			uart0_rts_pins: uart0_rts_ovl_pins {
				brcm,pins = <17>;
				brcm,function = <7>; /* alt3 */
				brcm,pull = <0>;
			};
		};
	};

	fragment@4 {
		target = <&uart4>;
		__overlay__ {
			pinctrl-names = "default";
			pinctrl-0 = <&uart4_pins>;
			status = "okay";
		};
	};

	fragment@5 {
		target = <&uart4_pins>;
		__overlay__ {
			brcm,pins = <8 9>;
			brcm,pull = <0 2>;
		};
	};

	fragment@6 {
		target = <&spi6_cs_pins>;
		__overlay__ {
			brcm,pins = <16 26>;
			brcm,function = <1 0>; // output input
			brcm,pull = <0 0>;
		};
	};

	fragment@7 {
		target = <&spi6>;
		__overlay__ {
			// needed to avoid dtc warning
			#address-cells = <1>;
			#size-cells = <0>;

			pinctrl-names = "default";
			pinctrl-0 = <&spi6_pins &spi6_cs_pins>;
			cs-gpios = <&gpio 16 1>;
			dmas = <&dma 23>, <&dma 27>;
			dma-names = "tx", "rx";
			status = "okay";

			unipispi6_0: unipispi@0 {
				compatible = "unipi,unipispi";
				reg = <0>;      // CE0
				#address-cells = <1>;
				#size-cells = <0>;
				spi-max-frequency = <12000000>;
				modbus-address = <1>;
				status = "okay";
				iogroup1: iogroup@1 {
					reg = <1>;
					compatible = "unipi,unipi-mfd", "iogroup";
					interrupt-parent = <&gpio>;
					interrupts = <26 0x1>;     // IRQ_TYPE_EDGE_RISING
					fw_variant = <0x2D10>;
					fw_name = "OEM-AKUSOLAR-1";
					board_name = "OEM-AKUSOLAR-1";
					cycle_counter = <1023>;
					//master_watchdog_enable = <6>;

					di {
						compatible = "unipi,gpio-di";
						gpio-controller;
						#gpio-cells = <2>;
						gpio-line-names = "DI1", "DI2", "DI3", "DI4";
						ngpio = <4>;
						value-reg = <0>;
						debounce-reg = <1010>;
						counter-reg = <16>;
					};
					do {
						compatible = "unipi,gpio-do";
						ngpio = <4>;
						value-coil = <0>;
						gpio-controller;
						#gpio-cells = <2>;
						gpio-line-names = "DO1", "DO2", "DO3", "DO4";
					};
					ro {
						compatible = "unipi,gpio-ro";
						ngpio = <4>;
						value-coil = <4>;
						gpio-controller;
						#gpio-cells = <2>;
						gpio-line-names = "RO1", "RO2", "RO3", "RO4";
					};
					ao_chip {
						compatible = "unipi,ao";
						io-count = <2>;
						io-value-reg = <10>;
					};
					led {
						compatible = "unipi,leds";
						coil-range = <12 6>;
						label-prefix = "unipi:green:uled-x";
					};
					sysled {
						#address-cells = <1>;
						#size-cells = <0>;
						compatible = "unipi,leds";
						coil-range = <18 9>;
						label-prefix = "unipi:green:sysled-x";
						rs485-1-txled@0 {
							reg = <0>;
							linux,default-trigger = "ttyAMA1-tx";
						};
						rs485-1-rxled@1 {
							reg = <1>;
							linux,default-trigger = "ttyAMA1-rx";
						};
						rs485-2-txled@2 {
							reg = <2>;
							linux,default-trigger = "ttyAMA0-tx";
						};
						rs485-2-rxled@3 {
							reg = <3>;
							linux,default-trigger = "ttyAMA0-rx";
						};
					};

				};
			};
		};
	};

	fragment@8 {
		target = <&gpio>;
		__overlay__ {
			reg_gprs_pins: reg-gprs-pins {
				brcm,pins = <11>;
				brcm,function = <1>; // out
				brcm,pull = <0>; // off
			};
		};
	};

	fragment@9 {
		target-path = "/";
		__overlay__ {
			reg_gprs: regulator-gprs {
				pinctrl-names = "default";
				pinctrl-0 = <&reg_gprs_pins>;
				compatible = "regulator-fixed";
				regulator-name = "vdd_gprs";
				gpio = <&gpio 11 1>;
				//enable-active-low;
				regulator-min-microvolt = <4000000>;
				regulator-max-microvolt = <4000000>;
			};
			unipi-gprs {
				compatible = "unipi-consumer";
				regulator-name = "gprs-consumer";
				regulator-boot-on;
				regulator-supplies = "vdd_gprs";
			};
		};
	};

	fragment@10 {
		target = <&bt>;
		__overlay__ {
			status = "disabled";
		};
	};

	fragment@11 {
		target = <&uart1>;
		__overlay__ {
			pinctrl-names = "default";
			pinctrl-0 = <&uart1_pins &bt_pins &fake_bt_cts>;
			status = "okay";
		};
	};

	fragment@12 {
		target = <&uart1_pins>;
		__overlay__ {
			brcm,pins = <32 33>;
			brcm,function = <2>; /* alt5=UART1 */
			brcm,pull = <0 2>;
			status = "okay";
		};
	};

	fragment@13 {
		target = <&gpio>;
		__overlay__ {
			fake_bt_cts: fake_bt_cts {
				brcm,pins = <31>;
				brcm,function = <1>; /* output */
			};
		};
	};

	fragment@14 {
		target-path = "/aliases";
		__overlay__ {
			serial0 = "/soc/serial@7e201000";
			serial1 = "/soc/serial@7e215040";
		};
	};

	fragment@15 {
		target = <&minibt>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@16 {
		target-path = "/";
		__overlay__ {
			wdt_gpio: wdt-gpio {
				compatible = "linux,wdt-gpio";
				//always-running;
				hw_margin_ms = <4000>;
				hw_algo = "level";
				pinctrl-names = "default";
				pinctrl-0 = <&wd_pins>;
				gpios = <&gpio 22 0>;
				status = "okay";
			};
			gpio_restart: gpio-restart {
				compatible = "gpio-restart";
				open-source;
				gpios = <&gpio 6 7>; /* GPIO_ACTIVE_LOW|GPIO_SINGLE_ENDED|GPIO_LINE_OPEN_DRAIN*/
				priority = <255>; /* <128> or <255> */
				active-delay = <100>;
				inactive-delay = <100>;
				wait-delay = <3000>;
				pinctrl-names = "default";
				pinctrl-0 = <&reset_pins>;
				status = "okay";
			};
		};
	};
	fragment@17 {
		target = <&gpio>;
		__overlay__ {
			wd_pins: wd-pins {
				brcm,pins = <22>;
				brcm,function = <1>; /* output */
			};
			reset_pins: reset-pins {
				brcm,pins = <6>;
				brcm,function = <0>; /* output */
			};
		};
	};
};

/* Bit 0 express polarity */
/*
#define GPIO_ACTIVE_HIGH 0
#define GPIO_ACTIVE_LOW 1
*/

/* Bit 1 express single-endedness */
/*
#define GPIO_PUSH_PULL 0
#define GPIO_SINGLE_ENDED 2
*/

/* Bit 2 express Open drain or open source */
/*
#define GPIO_LINE_OPEN_SOURCE 0
#define GPIO_LINE_OPEN_DRAIN 4
*/

/*
 * Open Drain/Collector is the combination of single-ended open drain interface.
 * Open Source/Emitter is the combination of single-ended open source interface.
 */
/*
#define GPIO_OPEN_DRAIN (GPIO_SINGLE_ENDED | GPIO_LINE_OPEN_DRAIN)
#define GPIO_OPEN_SOURCE (GPIO_SINGLE_ENDED | GPIO_LINE_OPEN_SOURCE)
*/